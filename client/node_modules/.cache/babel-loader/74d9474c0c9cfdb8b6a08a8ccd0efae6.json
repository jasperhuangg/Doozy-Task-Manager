{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nconst domain = \"http://localhost:9000\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      lists: []\n    };\n  }\n\n  rerender() {\n    this.setState({\n      isLoaded: false\n    });\n  } // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n\n\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\"\n      /*this.props.username*/\n\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      var lists = res;\n      this.setState({\n        lists: lists,\n        isLoaded: true\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded !== prevState.isLoaded) this.getLists();\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    }).then(res => res.text());\n  }\n\n  setItemTitle(title) {}\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      completed: completed\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    });\n  }\n\n  setItemDueDate(dueDate) {}\n\n  setItemPriority(priority) {}\n\n  setItemDescription(description) {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, this.state.lists.map((list, i) => /*#__PURE__*/React.createElement(Todolist, {\n      key: i,\n      color: list.color,\n      name: list.name,\n      items: list.items,\n      addListItem: (listName, title, dueDate, description, priority) => this.addListItem(listName, title, dueDate, description, priority),\n      setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n      setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n      setItemDueDate: (listName, itemID, dueDate) => this.setItemDueDate(listName, itemID, dueDate),\n      setItemPriority: (listName, itemID, priority) => this.setItemPriority(listName, itemID, priority),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js"],"names":["React","Component","Todolist","domain","App","constructor","props","state","isLoaded","error","lists","rerender","setState","getLists","url","body","JSON","stringify","username","fetch","method","headers","then","res","json","componentDidMount","componentDidUpdate","prevProps","prevState","addListItem","listName","title","dueDate","description","priority","text","setItemTitle","setItemCompleted","itemID","completed","slice","i","length","name","items","j","setItemDueDate","setItemPriority","setItemDescription","render","map","list","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\n\nconst domain = \"http://localhost:9000\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoaded: false, error: null, lists: [] };\n  }\n\n  rerender() {\n    this.setState({ isLoaded: false });\n  }\n\n  // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\" /*this.props.username*/,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        var lists = res;\n        this.setState({ lists: lists, isLoaded: true });\n      });\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded !== prevState.isLoaded) this.getLists();\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    }).then((res) => res.text());\n  }\n\n  setItemTitle(title) {}\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      completed: completed,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    });\n  }\n\n  setItemDueDate(dueDate) {}\n\n  setItemPriority(priority) {}\n\n  setItemDescription(description) {}\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.lists.map((list, i) => (\n          <Todolist\n            key={i}\n            color={list.color}\n            name={list.name}\n            items={list.items}\n            addListItem={(listName, title, dueDate, description, priority) =>\n              this.addListItem(listName, title, dueDate, description, priority)\n            }\n            setItemTitle={(listName, itemID, title) =>\n              this.setItemTitle(listName, itemID, title)\n            }\n            setItemCompleted={(listName, itemID, completed) =>\n              this.setItemCompleted(listName, itemID, completed)\n            }\n            setItemDueDate={(listName, itemID, dueDate) =>\n              this.setItemDueDate(listName, itemID, dueDate)\n            }\n            setItemPriority={(listName, itemID, priority) =>\n              this.setItemPriority(listName, itemID, priority)\n            }\n          />\n        ))}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}