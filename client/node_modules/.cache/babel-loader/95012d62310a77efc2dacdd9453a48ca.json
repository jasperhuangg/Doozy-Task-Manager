{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nconst domain = \"http://localhost:9000\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse: \"\",\n      isLoaded: false,\n      error: null,\n      lists: []\n    };\n  } // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n\n\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\"\n      /*this.props.username*/\n\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      // order items in each list by due date and then by priority\n      var lists = res;\n\n      for (let i = 0; i < lists.length; i++) lists[i].items.sort(sortListItems);\n\n      this.setState({\n        isLoaded: true,\n        lists: lists\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  } // addItem(listName, title, dueDate, description, priority)\n\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, this.state.lists.map((list, i) => /*#__PURE__*/React.createElement(Todolist, {\n      key: i,\n      color: list.color,\n      name: list.name,\n      items: list.items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;else if (!a.completed && b.completed) return -1;else {\n    // both are either completed or incomplete\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n      return priorityB - priorityA;\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate);\n      const dateB = new Date(b.dueDate);\n      return dateA < dateB;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js"],"names":["React","Component","Todolist","domain","App","constructor","props","state","apiResponse","isLoaded","error","lists","getLists","url","body","JSON","stringify","username","fetch","method","headers","then","res","json","i","length","items","sort","sortListItems","setState","componentDidMount","render","map","list","color","name","a","b","completed","dueDate","priorities","priorityA","indexOf","priority","priorityB","dateA","Date","dateB"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\n\nconst domain = \"http://localhost:9000\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { apiResponse: \"\", isLoaded: false, error: null, lists: [] };\n  }\n\n  // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\" /*this.props.username*/,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then(\n        (res) => {\n          // order items in each list by due date and then by priority\n          var lists = res;\n          for (let i = 0; i < lists.length; i++)\n            lists[i].items.sort(sortListItems);\n\n          this.setState({ isLoaded: true, lists: lists });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n\n  // addItem(listName, title, dueDate, description, priority)\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.lists.map((list, i) => (\n          <Todolist\n            key={i}\n            color={list.color}\n            name={list.name}\n            items={list.items}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;\n  else if (!a.completed && b.completed) return -1;\n  else {\n    // both are either completed or incomplete\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n      return priorityB - priorityA;\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate);\n      const dateB = new Date(b.dueDate);\n      return dateA < dateB;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}