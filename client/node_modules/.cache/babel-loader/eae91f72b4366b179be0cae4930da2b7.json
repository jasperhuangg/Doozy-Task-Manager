{"ast":null,"code":"var MACHINE_ID = Math.floor(Math.random() * 0xFFFFFF);\nvar index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\nvar pid = (typeof process === 'undefined' || typeof process.pid !== 'number' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n */\n\nvar isBuffer = function isBuffer(obj) {\n  return !!(obj != null && obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj));\n};\n/**\n * Create a new immutable ObjectID instance\n *\n * @class Represents the BSON ObjectID type\n * @param {String|Number} arg Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @return {Object} instance of ObjectID.\n */\n\n\nfunction ObjectID(arg) {\n  if (!(this instanceof ObjectID)) return new ObjectID(arg);\n  if (arg && (arg instanceof ObjectID || arg._bsontype === \"ObjectID\")) return arg;\n  var buf;\n\n  if (isBuffer(arg) || Array.isArray(arg) && arg.length === 12) {\n    buf = Array.prototype.slice.call(arg);\n  } else if (typeof arg === \"string\") {\n    if (arg.length !== 12 && !ObjectID.isValid(arg)) throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n    buf = buffer(arg);\n  } else if (/number|undefined/.test(typeof arg)) {\n    buf = buffer(generate(arg));\n  }\n\n  Object.defineProperty(this, \"id\", {\n    enumerable: true,\n    get: function get() {\n      return String.fromCharCode.apply(this, buf);\n    }\n  });\n  Object.defineProperty(this, \"str\", {\n    get: function get() {\n      return buf.map(hex.bind(this, 2)).join('');\n    }\n  });\n}\n\nmodule.exports = ObjectID;\nObjectID.generate = generate;\nObjectID.default = ObjectID;\n/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @param {Number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\n\nObjectID.createFromTime = function (time) {\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n  return new ObjectID(hex(8, time) + \"0000000000000000\");\n};\n/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\n\n\nObjectID.createFromHexString = function (hexString) {\n  if (!ObjectID.isValid(hexString)) throw new Error(\"Invalid ObjectID hex string\");\n  return new ObjectID(hexString);\n};\n/**\n * Checks if a value is a valid bson ObjectId\n *\n * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.\n * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.\n * @api public\n *\n * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!\n * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid\n */\n\n\nObjectID.isValid = function (objectid) {\n  if (!objectid || typeof objectid !== 'string' && (typeof objectid !== 'object' || Array.isArray(objectid) || typeof objectid.toString !== 'function')) return false; //call .toString() to get the hex if we're\n  // working with an instance of ObjectID\n\n  return /^[0-9A-F]{24}$/i.test(objectid.toString());\n};\n/**\n * set a custom machineID\n * \n * @param {String|Number} machineid Can be a string, hex-string or a number\n * @return {void}\n * @api public\n */\n\n\nObjectID.setMachineID = function (arg) {\n  var machineID;\n\n  if (typeof arg === \"string\") {\n    // hex string\n    machineID = parseInt(arg, 16); // any string\n\n    if (isNaN(machineID)) {\n      arg = ('000000' + arg).substr(-7, 6);\n      machineID = \"\";\n\n      for (var i = 0; i < 6; i++) {\n        machineID += arg.charCodeAt(i);\n      }\n    }\n  } else if (/number|undefined/.test(typeof arg)) {\n    machineID = arg | 0;\n  }\n\n  MACHINE_ID = machineID & 0xFFFFFF;\n};\n/**\n * get the machineID\n * \n * @return {number}\n * @api public\n */\n\n\nObjectID.getMachineID = function () {\n  return MACHINE_ID;\n};\n\nObjectID.prototype = {\n  _bsontype: 'ObjectID',\n  constructor: ObjectID,\n\n  /**\n   * Return the ObjectID id as a 24 byte hex string representation\n   *\n   * @return {String} return the 24 byte hex string representation.\n   * @api public\n   */\n  toHexString: function toHexString() {\n    return this.str;\n  },\n\n  /**\n   * Compares the equality of this ObjectID with `otherID`.\n   *\n   * @param {Object} other ObjectID instance to compare against.\n   * @return {Boolean} the result of comparing two ObjectID's\n   * @api public\n   */\n  equals: function equals(other) {\n    return !!other && this.str === other.toString();\n  },\n\n  /**\n   * Returns the generation date (accurate up to the second) that this ID was generated.\n   *\n   * @return {Date} the generation date\n   * @api public\n   */\n  getTimestamp: function getTimestamp() {\n    return new Date(parseInt(this.str.substr(0, 8), 16) * 1000);\n  }\n};\n\nfunction next() {\n  return index = (index + 1) % 0xFFFFFF;\n}\n\nfunction generate(time) {\n  if (typeof time !== 'number') time = Date.now() / 1000; //keep it in the ring!\n\n  time = parseInt(time, 10) % 0xFFFFFFFF; //FFFFFFFF FFFFFF FFFF FFFFFF\n\n  return hex(8, time) + hex(6, MACHINE_ID) + hex(4, pid) + hex(6, next());\n}\n\nfunction hex(length, n) {\n  n = n.toString(16);\n  return n.length === length ? n : \"00000000\".substring(n.length, length) + n;\n}\n\nfunction buffer(str) {\n  var i = 0,\n      out = [];\n  if (str.length === 24) for (; i < 24; out.push(parseInt(str[i] + str[i + 1], 16)), i += 2) {\n    ;\n  } else if (str.length === 12) for (; i < 12; out.push(str.charCodeAt(i)), i++) {\n    ;\n  }\n  return out;\n}\n\nvar inspect = Symbol && Symbol.for('nodejs.util.inspect.custom') || 'inspect';\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @api private\n */\n\nObjectID.prototype[inspect] = function () {\n  return \"ObjectID(\" + this + \")\";\n};\n\nObjectID.prototype.toJSON = ObjectID.prototype.toHexString;\nObjectID.prototype.toString = ObjectID.prototype.toHexString;","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/doozy_task_manager/client/node_modules/bson-objectid/objectid.js"],"names":["MACHINE_ID","Math","floor","random","index","ObjectID","parseInt","pid","process","isBuffer","obj","constructor","arg","_bsontype","buf","Array","isArray","length","prototype","slice","call","isValid","Error","buffer","test","generate","Object","defineProperty","enumerable","get","String","fromCharCode","apply","map","hex","bind","join","module","exports","default","createFromTime","time","createFromHexString","hexString","objectid","toString","setMachineID","machineID","isNaN","substr","i","charCodeAt","getMachineID","toHexString","str","equals","other","getTimestamp","Date","next","now","n","substring","out","push","inspect","Symbol","for","toJSON"],"mappings":"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","sourcesContent":["\nvar MACHINE_ID = Math.floor(Math.random() * 0xFFFFFF);\nvar index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\nvar pid = (typeof process === 'undefined' || typeof process.pid !== 'number' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;\n\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n */\nvar isBuffer = function (obj) {\n  return !!(\n  obj != null &&\n  obj.constructor &&\n  typeof obj.constructor.isBuffer === 'function' &&\n  obj.constructor.isBuffer(obj)\n  )\n};\n\n/**\n * Create a new immutable ObjectID instance\n *\n * @class Represents the BSON ObjectID type\n * @param {String|Number} arg Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @return {Object} instance of ObjectID.\n */\nfunction ObjectID(arg) {\n  if(!(this instanceof ObjectID)) return new ObjectID(arg);\n  if(arg && ((arg instanceof ObjectID) || arg._bsontype===\"ObjectID\"))\n    return arg;\n\n  var buf;\n\n  if(isBuffer(arg) || (Array.isArray(arg) && arg.length===12)) {\n    buf = Array.prototype.slice.call(arg);\n  }\n  else if(typeof arg === \"string\") {\n    if(arg.length!==12 && !ObjectID.isValid(arg))\n      throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n\n    buf = buffer(arg);\n  }\n  else if(/number|undefined/.test(typeof arg)) {\n    buf = buffer(generate(arg));\n  }\n\n  Object.defineProperty(this, \"id\", {\n    enumerable: true,\n    get: function() { return String.fromCharCode.apply(this, buf); }\n  });\n  Object.defineProperty(this, \"str\", {\n    get: function() { return buf.map(hex.bind(this, 2)).join(''); }\n  });\n}\nmodule.exports = ObjectID;\nObjectID.generate = generate;\nObjectID.default = ObjectID;\n\n/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @param {Number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromTime = function(time){\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n  return new ObjectID(hex(8,time)+\"0000000000000000\");\n};\n\n/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromHexString = function(hexString) {\n  if(!ObjectID.isValid(hexString))\n    throw new Error(\"Invalid ObjectID hex string\");\n\n  return new ObjectID(hexString);\n};\n\n/**\n * Checks if a value is a valid bson ObjectId\n *\n * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.\n * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.\n * @api public\n *\n * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!\n * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid\n */\nObjectID.isValid = function(objectid) {\n  if(!objectid || (typeof objectid !== 'string' && (typeof objectid !== 'object' || Array.isArray(objectid) || typeof objectid.toString !== 'function'))) return false;\n\n  //call .toString() to get the hex if we're\n  // working with an instance of ObjectID\n  return /^[0-9A-F]{24}$/i.test(objectid.toString());\n};\n\n/**\n * set a custom machineID\n * \n * @param {String|Number} machineid Can be a string, hex-string or a number\n * @return {void}\n * @api public\n */\nObjectID.setMachineID = function(arg) {\n  var machineID;\n\n  if(typeof arg === \"string\") {\n    // hex string\n    machineID = parseInt(arg, 16);\n   \n    // any string\n    if(isNaN(machineID)) {\n      arg = ('000000' + arg).substr(-7,6);\n\n      machineID = \"\";\n      for(var i = 0;i<6; i++) {\n        machineID += (arg.charCodeAt(i));\n      }\n    }\n  }\n  else if(/number|undefined/.test(typeof arg)) {\n    machineID = arg | 0;\n  }\n\n  MACHINE_ID = (machineID & 0xFFFFFF);\n}\n\n/**\n * get the machineID\n * \n * @return {number}\n * @api public\n */\nObjectID.getMachineID = function() {\n  return MACHINE_ID;\n}\n\nObjectID.prototype = {\n  _bsontype: 'ObjectID',\n  constructor: ObjectID,\n\n  /**\n   * Return the ObjectID id as a 24 byte hex string representation\n   *\n   * @return {String} return the 24 byte hex string representation.\n   * @api public\n   */\n  toHexString: function() {\n    return this.str;\n  },\n\n  /**\n   * Compares the equality of this ObjectID with `otherID`.\n   *\n   * @param {Object} other ObjectID instance to compare against.\n   * @return {Boolean} the result of comparing two ObjectID's\n   * @api public\n   */\n  equals: function (other){\n    return !!other && this.str === other.toString();\n  },\n\n  /**\n   * Returns the generation date (accurate up to the second) that this ID was generated.\n   *\n   * @return {Date} the generation date\n   * @api public\n   */\n  getTimestamp: function(){\n    return new Date(parseInt(this.str.substr(0,8), 16) * 1000);\n  }\n};\n\nfunction next() {\n  return index = (index+1) % 0xFFFFFF;\n}\n\nfunction generate(time) {\n  if (typeof time !== 'number')\n    time = Date.now()/1000;\n\n  //keep it in the ring!\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n\n  //FFFFFFFF FFFFFF FFFF FFFFFF\n  return hex(8,time) + hex(6,MACHINE_ID) + hex(4,pid) + hex(6,next());\n}\n\nfunction hex(length, n) {\n  n = n.toString(16);\n  return (n.length===length)? n : \"00000000\".substring(n.length, length) + n;\n}\n\nfunction buffer(str) {\n  var i=0,out=[];\n\n  if(str.length===24)\n    for(;i<24; out.push(parseInt(str[i]+str[i+1], 16)),i+=2);\n\n  else if(str.length===12)\n    for(;i<12; out.push(str.charCodeAt(i)),i++);\n\n  return out;\n}\n\nvar inspect = (Symbol && Symbol.for('nodejs.util.inspect.custom')) || 'inspect';\n\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @api private\n */\nObjectID.prototype[inspect] = function() { return \"ObjectID(\"+this+\")\" };\nObjectID.prototype.toJSON = ObjectID.prototype.toHexString;\nObjectID.prototype.toString = ObjectID.prototype.toHexString;\n"]},"metadata":{},"sourceType":"script"}