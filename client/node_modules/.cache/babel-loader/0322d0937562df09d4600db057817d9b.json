{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nconst domain = \"http://localhost:9000\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      lists: []\n    };\n  }\n\n  rerender() {\n    console.log(\"rerender is getting called\");\n    this.setState({\n      isLoaded: false\n    });\n  } // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n\n\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\"\n      /*this.props.username*/\n\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      var lists = res;\n      this.setState({\n        lists: lists,\n        isLoaded: true\n      });\n      console.log(\"state set\");\n    });\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded === false) {\n      this.getLists();\n      console.log(\"in componentDidUpdate after this.getLists(): \" + this.state.isLoaded);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, this.state.lists.map((list, i) => /*#__PURE__*/React.createElement(Todolist, {\n      key: i,\n      color: list.color,\n      name: list.name,\n      items: list.items,\n      addListItem: this.addListItem,\n      rerender: () => this.rerender(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js"],"names":["React","Component","Todolist","domain","App","constructor","props","state","isLoaded","error","lists","rerender","console","log","setState","getLists","url","body","JSON","stringify","username","fetch","method","headers","then","res","json","componentDidMount","componentDidUpdate","prevProps","prevState","render","map","list","i","color","name","items","addListItem"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAEA,eAAe,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AACzCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,KAAK,EAAE,IAA1B;AAAgCC,MAAAA,KAAK,EAAE;AAAvC,KAAb;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,SAAKC,QAAL,CAAc;AAAEN,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AACD,GATwC,CAWzC;AACA;;;AACAO,EAAAA,QAAQ,GAAG;AACT,UAAMC,GAAG,GAAGb,MAAM,GAAG,WAArB;AACA,UAAMc,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BC,MAAAA,QAAQ,EAAE;AAAS;;AADO,KAAf,CAAb;AAIAC,IAAAA,KAAK,CAACL,GAAD,EAAM;AACTM,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT,CAEP;;AAFO,OAFA;AAMTN,MAAAA,IAAI,EAAEA;AANG,KAAN,CAAL,CAQGO,IARH,CAQSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EARjB,EASGF,IATH,CASSC,GAAD,IAAS;AACb,UAAIf,KAAK,GAAGe,GAAZ;AACA,WAAKX,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAAEA,KAAT;AAAgBF,QAAAA,QAAQ,EAAE;AAA1B,OAAd;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,KAbH;AAcD;;AAEDc,EAAAA,iBAAiB,GAAG;AAClB,SAAKZ,QAAL;AACD;;AAEDa,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,QAAI,KAAKvB,KAAL,CAAWC,QAAX,KAAwB,KAA5B,EAAmC;AACjC,WAAKO,QAAL;AACAH,MAAAA,OAAO,CAACC,GAAR,CACE,kDAAkD,KAAKN,KAAL,CAAWC,QAD/D;AAGD;AACF;;AAEDuB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKxB,KAAL,CAAWG,KAAX,CAAiBsB,GAAjB,CAAqB,CAACC,IAAD,EAAOC,CAAP,kBACpB,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,KAAK,EAAED,IAAI,CAACE,KAFd;AAGE,MAAA,IAAI,EAAEF,IAAI,CAACG,IAHb;AAIE,MAAA,KAAK,EAAEH,IAAI,CAACI,KAJd;AAKE,MAAA,WAAW,EAAE,KAAKC,WALpB;AAME,MAAA,QAAQ,EAAE,MAAM,KAAK3B,QAAL,EANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF;AAcD;;AA/DwC","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\n\nconst domain = \"http://localhost:9000\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoaded: false, error: null, lists: [] };\n  }\n\n  rerender() {\n    console.log(\"rerender is getting called\");\n    this.setState({ isLoaded: false });\n  }\n\n  // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\" /*this.props.username*/,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        var lists = res;\n        this.setState({ lists: lists, isLoaded: true });\n        console.log(\"state set\");\n      });\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded === false) {\n      this.getLists();\n      console.log(\n        \"in componentDidUpdate after this.getLists(): \" + this.state.isLoaded\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.lists.map((list, i) => (\n          <Todolist\n            key={i}\n            color={list.color}\n            name={list.name}\n            items={list.items}\n            addListItem={this.addListItem}\n            rerender={() => this.rerender()}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}