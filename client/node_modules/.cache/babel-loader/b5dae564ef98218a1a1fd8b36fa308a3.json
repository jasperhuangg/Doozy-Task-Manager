{"ast":null,"code":"// takes in any string and parses out any keywords that can be used to construct a date string\n// returns a date in the format YYYY - MM - DD and the keywords that indicated the date\n// if nothing was found, returns an empty string for both keywords and date\n// examples:\n// - \"take out the trash tomorrow\" => returns tomorrow's date, \"tomorrow\"\n// - \"math test January 15th\" => returns \"2020-01-15\", \"January 15th\"\nexport default function DateParser(str){var spokenWords=[\"today\",\"tomorrow\",\"yesterday\",\"yday\",\"tmr\",\"monday\",\"mon\",\"tuesday\",\"tue\",\"wednesday\",\"wed\",\"thursday\",\"thu\",\"friday\",\"fri\",\"saturday\",\"sat\",\"sunday\",\"sun\"];var months=[\"january\",\"jan\",\"february\",\"feb\",\"march\",\"april\",\"may\",\"june\",\"july\",\"august\",\"aug\",\"september\",\"sep\",\"october\",\"oct\",\"november\",\"nov\",\"december\",\"dec\"];var daysWithSuffix=[\"1st\",\"2nd\",\"3rd\",\"4th\",\"5th\",\"6th\",\"7th\",\"8th\",\"9th\",\"10th\",\"11th\",\"12th\",\"13th\",\"14th\",\"15th\",\"16th\",\"17th\",\"18th\",\"19th\",\"20th\",\"21st\",\"22nd\",\"23rd\",\"24th\",\"25th\",\"26th\",\"27th\",\"28th\",\"29th\",\"30th\",\"31st\"];var words=str.toLowerCase().split(\" \");// get an array of all the words the string in lowercase\nvar isSpokenWord=false;var isStringDate=false;var monthBeforeDay=null;var keywords=\"\";var month=\"\";var monthCandidates=[];var day=\"\";// search for any occurences of commonly spoken words (e.g. tmr, today)\nfor(var i=0;i<words.length;i++){var word=words[i];if(spokenWords.indexOf(word)!==-1){keywords=word;isSpokenWord=true;break;}}// if we don't find any commonly spoken words, look for string representations of dates\nif(isSpokenWord===false){// look for month candidates\n// (could be multiple months in the string, want the first one that is part of a valid date)\nfor(var _i=0;_i<words.length;_i++){var _word=words[_i];if(months.indexOf(_word)!==-1){monthCandidates.push(_word);}}// if we found a month, look on either side of it for a date\nif(monthCandidates.length>0){// check each month candidate\nfor(var f=0;f<monthCandidates.length;f++){var monthCandidate=monthCandidates[f];var monthIndex=getPosition(words,monthCandidate,f+1);var dateCandidates=[];if(monthIndex-1>=0)dateCandidates.push({index:monthIndex-1,date:words[monthIndex-1]});if(monthIndex+1<words.length)dateCandidates.push({index:monthIndex+1,date:words[monthIndex+1]});// check to see if either of these dateCandidates are dates with suffixes (e.g. 23rd, 31st)\nfor(var _i2=0;_i2<dateCandidates.length;_i2++){var dateCandidate=dateCandidates[_i2].date;var idx=dateCandidates[_i2].index;if(daysWithSuffix.indexOf(dateCandidate)!==-1){day=dateCandidate;if(idx>monthIndex)monthBeforeDay=true;else monthBeforeDay=false;break;}}// if nothing was found, then we look for numeric representations of dates\nif(day===\"\"){for(var _i3=0;_i3<dateCandidates.length;_i3++){var _dateCandidate=parseInt(dateCandidates[_i3].date);var _idx=dateCandidates[_i3].index;if(_dateCandidate>0&&_dateCandidate<=31){day=_dateCandidate;if(_idx>monthIndex)monthBeforeDay=true;else monthBeforeDay=false;break;}}}// if we found a date, then we have a date value\nif(day!==\"\"){isStringDate=true;month=monthCandidates[f];break;}}}}// using parsed data, create and return the parsed date\nvar today=new Date();var currYear=today.getFullYear();var currMonth=today.getMonth()+1;var currDate=today.getDate();var currDayOfTheWeek=today.getDay()+1;// no date found\nif(!isSpokenWord&&!isStringDate)return{date:\"\",keywords:\"\"};else if(isSpokenWord&&!isStringDate){if(keywords===\"today\"){return{date:getFormattedDate(currYear,currMonth,currDate),keywords:keywords};}else if(keywords===\"yesterday\"||keywords===\"yday\"){var yesterday=new Date();yesterday.setDate(yesterday.getDate()-1);return{date:getFormattedDate(yesterday.getFullYear(),yesterday.getMonth()+1,yesterday.getDate()),keywords:keywords};}else if(keywords===\"tomorrow\"||keywords===\"tmr\"){var tomorrow=new Date();tomorrow.setDate(tomorrow.getDate()+1);return{date:getFormattedDate(tomorrow.getFullYear(),tomorrow.getMonth()+1,tomorrow.getDate()),keywords:keywords};}else{// str specifies a day of the week\n// always going to assume its the next upcoming day\n// (e.g. if today is Tuesday, Monday is in 6 days, if today is Sunday, Monday means tomorrow)\n// if day of the week is the same as the current day, returns date 7 days ahead\nvar dayOfTheWeek=dayOfTheWeekToNumber(keywords);var difference=distanceToNextDay(currDayOfTheWeek,dayOfTheWeek);var nextGivenDay=new Date();nextGivenDay.setDate(nextGivenDay.getDate()+difference);return{date:getFormattedDate(nextGivenDay.getFullYear(),nextGivenDay.getMonth()+1,nextGivenDay.getDate()),keywords:keywords};}}else if(isStringDate&&!isSpokenWord){// format string dates\nvar currDay=today.getDate();var monthNum=convertMonthToNumber(month);var dayNum=parseInt(day);var year=currYear;if(monthNum<currMonth)year=currYear+1;else if(monthNum===currMonth){if(dayNum<currDay)year=currYear+1;}else year=currYear;var keywordsToReturn=monthBeforeDay?month+\" \"+day:day+\" \"+month;return{date:getFormattedDate(year,monthNum,dayNum),keywords:keywordsToReturn};}}function convertMonthToNumber(month){if(month===\"jan\")return 1;if(month===\"feb\")return 2;if(month===\"aug\")return 8;if(month===\"sep\")return 9;if(month===\"oct\")return 10;if(month===\"nov\")return 11;if(month===\"dec\")return 12;var months=[\"\",\"january\",\"february\",\"march\",\"april\",\"may\",\"june\",\"july\",\"august\",\"september\",\"october\",\"november\",\"december\"];return months.indexOf(month);}function dayOfTheWeekToNumber(dayOfTheWeek){var daysOfTheWeek=[\"\",\"sunday\",\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\"];return daysOfTheWeek.indexOf(dayOfTheWeek);}function distanceToNextDay(day1,day2){var diff=7-day1+day2;if(diff!==7)diff%=7;return diff;}function getFormattedDate(year,month,day){if(month<10)month=\"0\"+month.toString();if(day<10)day=\"0\"+day.toString();return year+\"-\"+month+\"-\"+day;}function getPosition(array,entry,occurence){var seen=0;for(var i=0;i<array.length;i++){if(array[i]===entry){seen++;if(seen===occurence)return i;}}if(seen===1)return array.indexOf(entry);}// console.log(DateParser(\"go to italy sep 10\"));","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/doozy_task_manager/client/src/todolist/DateParser.js"],"names":["DateParser","str","spokenWords","months","daysWithSuffix","words","toLowerCase","split","isSpokenWord","isStringDate","monthBeforeDay","keywords","month","monthCandidates","day","i","length","word","indexOf","push","f","monthCandidate","monthIndex","getPosition","dateCandidates","index","date","dateCandidate","idx","parseInt","today","Date","currYear","getFullYear","currMonth","getMonth","currDate","getDate","currDayOfTheWeek","getDay","getFormattedDate","yesterday","setDate","tomorrow","dayOfTheWeek","dayOfTheWeekToNumber","difference","distanceToNextDay","nextGivenDay","currDay","monthNum","convertMonthToNumber","dayNum","year","keywordsToReturn","daysOfTheWeek","day1","day2","diff","toString","array","entry","occurence","seen"],"mappings":"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","sourcesContent":["// takes in any string and parses out any keywords that can be used to construct a date string\n// returns a date in the format YYYY - MM - DD and the keywords that indicated the date\n// if nothing was found, returns an empty string for both keywords and date\n// examples:\n// - \"take out the trash tomorrow\" => returns tomorrow's date, \"tomorrow\"\n// - \"math test January 15th\" => returns \"2020-01-15\", \"January 15th\"\nexport default function DateParser(str) {\n  const spokenWords = [\n    \"today\",\n    \"tomorrow\",\n    \"yesterday\",\n    \"yday\",\n    \"tmr\",\n    \"monday\",\n    \"mon\",\n    \"tuesday\",\n    \"tue\",\n    \"wednesday\",\n    \"wed\",\n    \"thursday\",\n    \"thu\",\n    \"friday\",\n    \"fri\",\n    \"saturday\",\n    \"sat\",\n    \"sunday\",\n    \"sun\",\n  ];\n\n  const months = [\n    \"january\",\n    \"jan\",\n    \"february\",\n    \"feb\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"aug\",\n    \"september\",\n    \"sep\",\n    \"october\",\n    \"oct\",\n    \"november\",\n    \"nov\",\n    \"december\",\n    \"dec\",\n  ];\n\n  const daysWithSuffix = [\n    \"1st\",\n    \"2nd\",\n    \"3rd\",\n    \"4th\",\n    \"5th\",\n    \"6th\",\n    \"7th\",\n    \"8th\",\n    \"9th\",\n    \"10th\",\n    \"11th\",\n    \"12th\",\n    \"13th\",\n    \"14th\",\n    \"15th\",\n    \"16th\",\n    \"17th\",\n    \"18th\",\n    \"19th\",\n    \"20th\",\n    \"21st\",\n    \"22nd\",\n    \"23rd\",\n    \"24th\",\n    \"25th\",\n    \"26th\",\n    \"27th\",\n    \"28th\",\n    \"29th\",\n    \"30th\",\n    \"31st\",\n  ];\n\n  var words = str.toLowerCase().split(\" \"); // get an array of all the words the string in lowercase\n\n  var isSpokenWord = false;\n  var isStringDate = false;\n  var monthBeforeDay = null;\n  var keywords = \"\";\n  var month = \"\";\n  var monthCandidates = [];\n  var day = \"\";\n\n  // search for any occurences of commonly spoken words (e.g. tmr, today)\n  for (let i = 0; i < words.length; i++) {\n    var word = words[i];\n    if (spokenWords.indexOf(word) !== -1) {\n      keywords = word;\n      isSpokenWord = true;\n      break;\n    }\n  }\n\n  // if we don't find any commonly spoken words, look for string representations of dates\n  if (isSpokenWord === false) {\n    // look for month candidates\n    // (could be multiple months in the string, want the first one that is part of a valid date)\n    for (let i = 0; i < words.length; i++) {\n      let word = words[i];\n      if (months.indexOf(word) !== -1) {\n        monthCandidates.push(word);\n      }\n    }\n\n    // if we found a month, look on either side of it for a date\n    if (monthCandidates.length > 0) {\n      // check each month candidate\n      for (let f = 0; f < monthCandidates.length; f++) {\n        var monthCandidate = monthCandidates[f];\n        const monthIndex = getPosition(words, monthCandidate, f + 1);\n        var dateCandidates = [];\n        if (monthIndex - 1 >= 0)\n          dateCandidates.push({\n            index: monthIndex - 1,\n            date: words[monthIndex - 1],\n          });\n        if (monthIndex + 1 < words.length)\n          dateCandidates.push({\n            index: monthIndex + 1,\n            date: words[monthIndex + 1],\n          });\n\n        // check to see if either of these dateCandidates are dates with suffixes (e.g. 23rd, 31st)\n        for (let i = 0; i < dateCandidates.length; i++) {\n          const dateCandidate = dateCandidates[i].date;\n          const idx = dateCandidates[i].index;\n          if (daysWithSuffix.indexOf(dateCandidate) !== -1) {\n            day = dateCandidate;\n            if (idx > monthIndex) monthBeforeDay = true;\n            else monthBeforeDay = false;\n            break;\n          }\n        }\n\n        // if nothing was found, then we look for numeric representations of dates\n        if (day === \"\") {\n          for (let i = 0; i < dateCandidates.length; i++) {\n            const dateCandidate = parseInt(dateCandidates[i].date);\n            const idx = dateCandidates[i].index;\n            if (dateCandidate > 0 && dateCandidate <= 31) {\n              day = dateCandidate;\n              if (idx > monthIndex) monthBeforeDay = true;\n              else monthBeforeDay = false;\n              break;\n            }\n          }\n        }\n\n        // if we found a date, then we have a date value\n        if (day !== \"\") {\n          isStringDate = true;\n          month = monthCandidates[f];\n          break;\n        }\n      }\n    }\n  }\n\n  // using parsed data, create and return the parsed date\n  var today = new Date();\n  var currYear = today.getFullYear();\n  var currMonth = today.getMonth() + 1;\n  var currDate = today.getDate();\n  var currDayOfTheWeek = today.getDay() + 1;\n\n  // no date found\n  if (!isSpokenWord && !isStringDate) return { date: \"\", keywords: \"\" };\n  else if (isSpokenWord && !isStringDate) {\n    if (keywords === \"today\") {\n      return {\n        date: getFormattedDate(currYear, currMonth, currDate),\n        keywords: keywords,\n      };\n    } else if (keywords === \"yesterday\" || keywords === \"yday\") {\n      var yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      return {\n        date: getFormattedDate(\n          yesterday.getFullYear(),\n          yesterday.getMonth() + 1,\n          yesterday.getDate()\n        ),\n        keywords: keywords,\n      };\n    } else if (keywords === \"tomorrow\" || keywords === \"tmr\") {\n      var tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      return {\n        date: getFormattedDate(\n          tomorrow.getFullYear(),\n          tomorrow.getMonth() + 1,\n          tomorrow.getDate()\n        ),\n        keywords: keywords,\n      };\n    } else {\n      // str specifies a day of the week\n      // always going to assume its the next upcoming day\n      // (e.g. if today is Tuesday, Monday is in 6 days, if today is Sunday, Monday means tomorrow)\n      // if day of the week is the same as the current day, returns date 7 days ahead\n      var dayOfTheWeek = dayOfTheWeekToNumber(keywords);\n      var difference = distanceToNextDay(currDayOfTheWeek, dayOfTheWeek);\n      var nextGivenDay = new Date();\n      nextGivenDay.setDate(nextGivenDay.getDate() + difference);\n\n      return {\n        date: getFormattedDate(\n          nextGivenDay.getFullYear(),\n          nextGivenDay.getMonth() + 1,\n          nextGivenDay.getDate()\n        ),\n        keywords: keywords,\n      };\n    }\n  } else if (isStringDate && !isSpokenWord) {\n    // format string dates\n    var currDay = today.getDate();\n\n    var monthNum = convertMonthToNumber(month);\n    var dayNum = parseInt(day);\n\n    var year = currYear;\n    if (monthNum < currMonth) year = currYear + 1;\n    else if (monthNum === currMonth) {\n      if (dayNum < currDay) year = currYear + 1;\n    } else year = currYear;\n\n    var keywordsToReturn = monthBeforeDay\n      ? month + \" \" + day\n      : day + \" \" + month;\n\n    return {\n      date: getFormattedDate(year, monthNum, dayNum),\n      keywords: keywordsToReturn,\n    };\n  }\n}\n\nfunction convertMonthToNumber(month) {\n  if (month === \"jan\") return 1;\n  if (month === \"feb\") return 2;\n  if (month === \"aug\") return 8;\n  if (month === \"sep\") return 9;\n  if (month === \"oct\") return 10;\n  if (month === \"nov\") return 11;\n  if (month === \"dec\") return 12;\n\n  const months = [\n    \"\",\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n  ];\n\n  return months.indexOf(month);\n}\n\nfunction dayOfTheWeekToNumber(dayOfTheWeek) {\n  const daysOfTheWeek = [\n    \"\",\n    \"sunday\",\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\",\n  ];\n\n  return daysOfTheWeek.indexOf(dayOfTheWeek);\n}\n\nfunction distanceToNextDay(day1, day2) {\n  var diff = 7 - day1 + day2;\n  if (diff !== 7) diff %= 7;\n  return diff;\n}\n\nfunction getFormattedDate(year, month, day) {\n  if (month < 10) month = \"0\" + month.toString();\n  if (day < 10) day = \"0\" + day.toString();\n\n  return year + \"-\" + month + \"-\" + day;\n}\n\nfunction getPosition(array, entry, occurence) {\n  var seen = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === entry) {\n      seen++;\n      if (seen === occurence) return i;\n    }\n  }\n  if (seen === 1) return array.indexOf(entry);\n}\n\n// console.log(DateParser(\"go to italy sep 10\"));\n"]},"metadata":{},"sourceType":"module"}