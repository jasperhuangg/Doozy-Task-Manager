{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nimport Details from \"./todolist/Details.js\";\nconst domain = \"http://localhost:9000\";\n\nvar ObjectID = require(\"bson-objectid\");\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      lists: [],\n      currentlySelectedList: 0,\n      currentlySelectedItemID: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  getCurrentlySelectedItem() {\n    var items = this.state.lists.slice(this.state.currentlySelectedList)[0].items;\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].itemID === this.state.currentlySelectedItemID) return items[i];\n    }\n  } // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n\n\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\"\n      /*this.props.username*/\n\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      var lists = res;\n      this.setState({\n        lists: lists,\n        isLoaded: true\n      });\n    });\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var objID = null;\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID().toString()\n        };\n        items.push(item);\n        objID = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: objID\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        var items = lists[i].items;\n        var idx = -1;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n\n        items = items.splice(idx, 1);\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/deleteListItem\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    });\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      title: title\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    });\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      completed: completed\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(dueDate) {}\n\n  setItemPriority(priority) {}\n\n  setItemDescription(description) {}\n\n  render() {\n    const listArr = this.state.lists.slice(this.state.currentlySelectedList, 1);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"sidebar\",\n      className: \"col-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"todolist\",\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, listArr.map((list, i) => /*#__PURE__*/React.createElement(Todolist, {\n      key: list.name,\n      color: list.color,\n      name: list.name,\n      items: list.items,\n      addListItem: (listName, title, dueDate, description, priority) => this.addListItem(listName, title, dueDate, description, priority),\n      deleteListItem: (listName, itemID) => this.deleteListItem(listName, itemID),\n      setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n      setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n      setItemDueDate: (listName, itemID, dueDate) => this.setItemDueDate(listName, itemID, dueDate),\n      setItemPriority: (listName, itemID, priority) => this.setItemPriority(listName, itemID, priority),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"details\",\n      className: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Details, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;else if (!a.completed && b.completed) return -1;else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n      if (priorityA !== priorityB) return priorityB - priorityA;else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js"],"names":["React","Component","Todolist","Details","domain","ObjectID","require","App","constructor","props","state","isLoaded","error","lists","currentlySelectedList","currentlySelectedItemID","componentDidMount","getLists","getCurrentlySelectedItem","items","slice","i","length","itemID","url","body","JSON","stringify","username","fetch","method","headers","then","res","json","setState","addListItem","listName","title","dueDate","description","priority","objID","name","item","completed","toString","push","sort","sortListItems","deleteListItem","idx","j","splice","setItemTitle","setItemCompleted","setListName","oldListName","newListName","setItemDueDate","setItemPriority","setItemDescription","render","listArr","map","list","color","a","b","priorities","priorityA","indexOf","priorityB","itemIDA","itemIDB","dateA","Date","dateB"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nimport Details from \"./todolist/Details.js\";\n\nconst domain = \"http://localhost:9000\";\nvar ObjectID = require(\"bson-objectid\");\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      lists: [],\n      currentlySelectedList: 0,\n      currentlySelectedItemID: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  getCurrentlySelectedItem() {\n    var items = this.state.lists.slice(this.state.currentlySelectedList)[0]\n      .items;\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].itemID === this.state.currentlySelectedItemID)\n        return items[i];\n    }\n  }\n\n  // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\" /*this.props.username*/,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        var lists = res;\n        this.setState({ lists: lists, isLoaded: true });\n      });\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var objID = null;\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID().toString(),\n        };\n        items.push(item);\n        objID = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: objID,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        var items = lists[i].items;\n        var idx = -1;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n        items = items.splice(idx, 1);\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/deleteListItem\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    });\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      title: title,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    });\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      completed: completed,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(dueDate) {}\n\n  setItemPriority(priority) {}\n\n  setItemDescription(description) {}\n\n  render() {\n    const listArr = this.state.lists.slice(this.state.currentlySelectedList, 1);\n\n    return (\n      <div className=\"container-fluid row\">\n        <div id=\"sidebar\" className=\"col-2\"></div>\n        <div id=\"todolist\" className=\"col-6\">\n          {listArr.map((list, i) => (\n            <Todolist\n              key={list.name}\n              color={list.color}\n              name={list.name}\n              items={list.items}\n              addListItem={(listName, title, dueDate, description, priority) =>\n                this.addListItem(\n                  listName,\n                  title,\n                  dueDate,\n                  description,\n                  priority\n                )\n              }\n              deleteListItem={(listName, itemID) =>\n                this.deleteListItem(listName, itemID)\n              }\n              setItemTitle={(listName, itemID, title) =>\n                this.setItemTitle(listName, itemID, title)\n              }\n              setItemCompleted={(listName, itemID, completed) =>\n                this.setItemCompleted(listName, itemID, completed)\n              }\n              setItemDueDate={(listName, itemID, dueDate) =>\n                this.setItemDueDate(listName, itemID, dueDate)\n              }\n              setItemPriority={(listName, itemID, priority) =>\n                this.setItemPriority(listName, itemID, priority)\n              }\n            />\n          ))}\n        </div>\n        <div id=\"details\" className=\"col-4\">\n          <Details />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;\n  else if (!a.completed && b.completed) return -1;\n  else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;\n  else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;\n  else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n\n      if (priorityA !== priorityB) return priorityB - priorityA;\n      else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}