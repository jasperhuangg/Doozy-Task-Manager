{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nimport Details from \"./todolist/Details.js\";\nimport Login from \"./todolist/Login.js\";\nconst domain = \"http://localhost:9000\";\n\nvar ObjectID = require(\"bson-objectid\");\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      lists: [],\n      username: \"Jasper\",\n      currentlySelectedList: 0,\n      currentlySelectedItemID: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  setSelectedItem(itemID) {\n    this.setState({\n      currentlySelectedItemID: itemID\n    });\n  }\n\n  getCurrentlySelectedItem() {\n    if (this.state.currentlySelectedItemID === \"\") return {\n      title: \"\",\n      description: \"\",\n      dueDate: \"\",\n      priority: \"\",\n      completed: false,\n      itemID: \"\"\n    };\n    var items = this.state.lists.slice(this.state.currentlySelectedList)[0].items;\n\n    for (let i = 0; i < items.length; i++) if (items[i].itemID === this.state.currentlySelectedItemID) return items[i];\n  } // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n\n\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: this.state.username\n      /*this.props.username*/\n\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      var lists = res;\n      this.setState({\n        lists: lists,\n        isLoaded: true\n      });\n    });\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var id = null;\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID().toString()\n        };\n        items.push(item);\n        id = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists,\n      currentlySelectedItemID: id\n    });\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: id\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    console.log(\"/deleteListItem called with \" + itemID);\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        var items = lists[i].items;\n        var idx = -1;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n\n        items = items.splice(idx, 1);\n      }\n    }\n\n    this.setState({\n      lists: lists,\n      currentlySelectedItemID: \"\"\n    });\n    const url = domain + \"/deleteListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.text()).then(res => console.log(res));\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      title: title\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.text()).then(res => console.log(res));\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      completed: completed\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(listName, itemID, dueDate) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].dueDate = dueDate;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemDueDate\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      dueDate: dueDate\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  setItemPriority(listName, itemID, priority) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].priority = priority;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemPriority\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      priority: priority\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  setItemDescription(listName, itemID, description) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].description = description;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemDescription\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      description: description\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  render() {\n    const listArr = this.state.lists.slice(this.state.currentlySelectedList, 1);\n    const selectedItem = this.getCurrentlySelectedItem();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"login-register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Login, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"app\",\n      className: \"container-fluid row d-none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"sidebar\",\n      className: \"col-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }\n    }), listArr.map((list, i) => {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: list.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"todolist\",\n        className: \"col-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Todolist, {\n        color: list.color,\n        name: list.name,\n        items: list.items,\n        addListItem: (listName, title, dueDate, description, priority) => this.addListItem(listName, title, dueDate, description, priority),\n        deleteListItem: (listName, itemID) => this.deleteListItem(listName, itemID),\n        setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n        setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n        setSelectedItem: itemID => this.setSelectedItem(itemID),\n        selectedItemID: this.state.currentlySelectedItemID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"details\",\n        className: \"col-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Details, {\n        listName: list.name,\n        selectedItemID: selectedItem.itemID,\n        selectedItemTitle: selectedItem.title,\n        selectedItemDueDate: selectedItem.dueDate,\n        selectedItemDescription: selectedItem.description,\n        selectedItemPriority: selectedItem.priority,\n        selectedItemCompleted: selectedItem.completed,\n        setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n        setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n        setItemDueDate: (listName, itemID, dueDate) => this.setItemDueDate(listName, itemID, dueDate),\n        setItemPriority: (listName, itemID, priority) => this.setItemPriority(listName, itemID, priority),\n        setItemDescription: (listName, itemID, description) => this.setItemDescription(listName, itemID, description),\n        handleDelete: (listName, itemID) => this.deleteListItem(listName, itemID),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 19\n        }\n      })));\n    })));\n  }\n\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;else if (!a.completed && b.completed) return -1;else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n      if (priorityA !== priorityB) return priorityB - priorityA;else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js"],"names":["React","Component","Todolist","Details","Login","domain","ObjectID","require","App","constructor","props","state","isLoaded","error","lists","username","currentlySelectedList","currentlySelectedItemID","componentDidMount","getLists","setSelectedItem","itemID","setState","getCurrentlySelectedItem","title","description","dueDate","priority","completed","items","slice","i","length","url","body","JSON","stringify","fetch","method","headers","then","res","json","addListItem","listName","id","name","item","toString","push","sort","sortListItems","deleteListItem","console","log","idx","j","splice","text","setItemTitle","setItemCompleted","setListName","oldListName","newListName","setItemDueDate","setItemPriority","setItemDescription","render","listArr","selectedItem","map","list","color","a","b","priorities","priorityA","indexOf","priorityB","itemIDA","itemIDB","dateA","Date","dateB"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nimport Details from \"./todolist/Details.js\";\nimport Login from \"./todolist/Login.js\";\n\nconst domain = \"http://localhost:9000\";\nvar ObjectID = require(\"bson-objectid\");\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      lists: [],\n      username: \"Jasper\",\n      currentlySelectedList: 0,\n      currentlySelectedItemID: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  setSelectedItem(itemID) {\n    this.setState({ currentlySelectedItemID: itemID });\n  }\n\n  getCurrentlySelectedItem() {\n    if (this.state.currentlySelectedItemID === \"\")\n      return {\n        title: \"\",\n        description: \"\",\n        dueDate: \"\",\n        priority: \"\",\n        completed: false,\n        itemID: \"\",\n      };\n\n    var items = this.state.lists.slice(this.state.currentlySelectedList)[0]\n      .items;\n\n    for (let i = 0; i < items.length; i++)\n      if (items[i].itemID === this.state.currentlySelectedItemID)\n        return items[i];\n  }\n\n  // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: this.state.username /*this.props.username*/,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        var lists = res;\n        this.setState({ lists: lists, isLoaded: true });\n      });\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var id = null;\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID().toString(),\n        };\n        items.push(item);\n        id = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({ lists: lists, currentlySelectedItemID: id });\n\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: id,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    console.log(\"/deleteListItem called with \" + itemID);\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        var items = lists[i].items;\n        var idx = -1;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n        items = items.splice(idx, 1);\n      }\n    }\n\n    this.setState({ lists: lists, currentlySelectedItemID: \"\" });\n\n    const url = domain + \"/deleteListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.text())\n      .then((res) => console.log(res));\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      title: title,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.text())\n      .then((res) => console.log(res));\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      completed: completed,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(listName, itemID, dueDate) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].dueDate = dueDate;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemDueDate\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      dueDate: dueDate,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  setItemPriority(listName, itemID, priority) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].priority = priority;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemPriority\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      priority: priority,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  setItemDescription(listName, itemID, description) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].description = description;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemDescription\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      description: description,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  render() {\n    const listArr = this.state.lists.slice(this.state.currentlySelectedList, 1);\n\n    const selectedItem = this.getCurrentlySelectedItem();\n\n    return (\n      <>\n        <div id=\"login-register\">\n          <Login />\n        </div>\n        <div id=\"app\" className=\"container-fluid row d-none\">\n          <div id=\"sidebar\" className=\"col-2\"></div>\n          {listArr.map((list, i) => {\n            return (\n              <React.Fragment key={list.name}>\n                <div id=\"todolist\" className=\"col-6\">\n                  <Todolist\n                    color={list.color}\n                    name={list.name}\n                    items={list.items}\n                    addListItem={(\n                      listName,\n                      title,\n                      dueDate,\n                      description,\n                      priority\n                    ) =>\n                      this.addListItem(\n                        listName,\n                        title,\n                        dueDate,\n                        description,\n                        priority\n                      )\n                    }\n                    deleteListItem={(listName, itemID) =>\n                      this.deleteListItem(listName, itemID)\n                    }\n                    setItemTitle={(listName, itemID, title) =>\n                      this.setItemTitle(listName, itemID, title)\n                    }\n                    setItemCompleted={(listName, itemID, completed) =>\n                      this.setItemCompleted(listName, itemID, completed)\n                    }\n                    setSelectedItem={(itemID) => this.setSelectedItem(itemID)}\n                    selectedItemID={this.state.currentlySelectedItemID}\n                  />\n                </div>\n                <div id=\"details\" className=\"col-4\">\n                  <Details\n                    listName={list.name}\n                    selectedItemID={selectedItem.itemID}\n                    selectedItemTitle={selectedItem.title}\n                    selectedItemDueDate={selectedItem.dueDate}\n                    selectedItemDescription={selectedItem.description}\n                    selectedItemPriority={selectedItem.priority}\n                    selectedItemCompleted={selectedItem.completed}\n                    setItemTitle={(listName, itemID, title) =>\n                      this.setItemTitle(listName, itemID, title)\n                    }\n                    setItemCompleted={(listName, itemID, completed) =>\n                      this.setItemCompleted(listName, itemID, completed)\n                    }\n                    setItemDueDate={(listName, itemID, dueDate) =>\n                      this.setItemDueDate(listName, itemID, dueDate)\n                    }\n                    setItemPriority={(listName, itemID, priority) =>\n                      this.setItemPriority(listName, itemID, priority)\n                    }\n                    setItemDescription={(listName, itemID, description) =>\n                      this.setItemDescription(listName, itemID, description)\n                    }\n                    handleDelete={(listName, itemID) =>\n                      this.deleteListItem(listName, itemID)\n                    }\n                  />\n                </div>\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;\n  else if (!a.completed && b.completed) return -1;\n  else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;\n  else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;\n  else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n\n      if (priorityA !== priorityB) return priorityB - priorityA;\n      else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}