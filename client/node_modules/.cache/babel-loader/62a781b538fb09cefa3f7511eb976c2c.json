{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nimport Details from \"./todolist/Details.js\";\nimport Login from \"./todolist/Login.js\";\nimport Register from \"./todolist/Register.js\";\n\nvar ObjectID = require(\"bson-objectid\");\n\nconst domain = \"http://localhost:9000\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      docTitle: \"Log in to Doozy\",\n      loggedIn: \"not yet\",\n      loginOrSignIn: \"Login\",\n      error: null,\n      lists: [],\n      username: \"Jasper\",\n      currentlySelectedList: 0,\n      currentlySelectedItemID: \"\"\n    };\n  }\n\n  componentDidMount() {// this will be where you check for the cookie\n    // if the cookie is valid, then\n    // this.setState({\n    //   loggedIn: \"successful\",\n    //   username: \"[whatever was in the cookie]\",\n    // });\n  }\n\n  verifyLogin(username, password) {\n    console.log(\"/verifyLogin called with: \" + username + \", \" + password);\n    const url = domain + \"/verifyLogin\";\n    const body = JSON.stringify({\n      username: username,\n      password: password\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n\n      if (res.success) {\n        this.getLists();\n        this.setState({\n          docTitle: \"Lists | Doozy\",\n          loggedIn: \"successful\"\n        });\n      } else if (res.info === \"username does not exist\") this.setState({\n        loggedIn: \"username does not exist\"\n      });else if (res.info === \"incorrect password\") this.setState({\n        loggedIn: \"incorrect password\"\n      });\n    });\n  }\n\n  setSelectedItem(itemID) {\n    this.setState({\n      currentlySelectedItemID: itemID\n    });\n  }\n\n  getCurrentlySelectedItem() {\n    if (this.state.currentlySelectedItemID === \"\") return {\n      title: \"\",\n      description: \"\",\n      dueDate: \"\",\n      priority: \"\",\n      completed: false,\n      itemID: \"\"\n    };\n    var items = this.state.lists.slice(this.state.currentlySelectedList)[0].items;\n\n    for (let i = 0; i < items.length; i++) if (items[i].itemID === this.state.currentlySelectedItemID) return items[i];\n  } // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n\n\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: this.state.username\n      /*this.props.username*/\n\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      var lists = res;\n      this.setState({\n        lists: lists\n      });\n    });\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var id = null;\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID().toString()\n        };\n        items.push(item);\n        id = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists,\n      currentlySelectedItemID: id\n    });\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: id\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    console.log(\"/deleteListItem called with \" + itemID);\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        var items = lists[i].items;\n        var idx = -1;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n\n        items = items.splice(idx, 1);\n      }\n    }\n\n    this.setState({\n      lists: lists,\n      currentlySelectedItemID: \"\"\n    });\n    const url = domain + \"/deleteListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.text()).then(res => console.log(res));\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      title: title\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.text()).then(res => console.log(res));\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      completed: completed\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(listName, itemID, dueDate) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].dueDate = dueDate;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemDueDate\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      dueDate: dueDate\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  setItemPriority(listName, itemID, priority) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].priority = priority;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemPriority\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      priority: priority\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  verifyCookie() {}\n\n  setItemDescription(listName, itemID, description) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].description = description;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemDescription\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      description: description\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  render() {\n    document.title = this.state.docTitle;\n    const listArr = this.state.lists.slice(this.state.currentlySelectedList, 1);\n    const selectedItem = this.getCurrentlySelectedItem();\n    const appClasses = \"container-fluid row\" + (this.state.loggedIn === \"successful\" ? \"\" : \" d-none\");\n    const loginClasses = \"container-fluid\" + (this.state.loggedIn === \"successful\" ? \" d-none\" : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"login-register\",\n      className: loginClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Login, {\n      loginInfo: this.state.loggedIn,\n      verifyLogin: (username, password) => this.verifyLogin(username, password),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Register, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"app\",\n      className: appClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"sidebar\",\n      className: \"col-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }\n    }), listArr.map((list, i) => {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: list.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"todolist\",\n        className: \"col-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Todolist, {\n        color: list.color,\n        name: list.name,\n        items: list.items,\n        addListItem: (listName, title, dueDate, description, priority) => this.addListItem(listName, title, dueDate, description, priority),\n        deleteListItem: (listName, itemID) => this.deleteListItem(listName, itemID),\n        setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n        setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n        setSelectedItem: itemID => this.setSelectedItem(itemID),\n        selectedItemID: this.state.currentlySelectedItemID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"details\",\n        className: \"col-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Details, {\n        listName: list.name,\n        selectedItemID: selectedItem.itemID,\n        selectedItemTitle: selectedItem.title,\n        selectedItemDueDate: selectedItem.dueDate,\n        selectedItemDescription: selectedItem.description,\n        selectedItemPriority: selectedItem.priority,\n        selectedItemCompleted: selectedItem.completed,\n        setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n        setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n        setItemDueDate: (listName, itemID, dueDate) => this.setItemDueDate(listName, itemID, dueDate),\n        setItemPriority: (listName, itemID, priority) => this.setItemPriority(listName, itemID, priority),\n        setItemDescription: (listName, itemID, description) => this.setItemDescription(listName, itemID, description),\n        handleDelete: (listName, itemID) => this.deleteListItem(listName, itemID),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 19\n        }\n      })));\n    })));\n  }\n\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;else if (!a.completed && b.completed) return -1;else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n      if (priorityA !== priorityB) return priorityB - priorityA;else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js"],"names":["React","Component","Todolist","Details","Login","Register","ObjectID","require","domain","App","constructor","props","state","docTitle","loggedIn","loginOrSignIn","error","lists","username","currentlySelectedList","currentlySelectedItemID","componentDidMount","verifyLogin","password","console","log","url","body","JSON","stringify","fetch","method","headers","then","res","json","success","getLists","setState","info","setSelectedItem","itemID","getCurrentlySelectedItem","title","description","dueDate","priority","completed","items","slice","i","length","addListItem","listName","id","name","item","toString","push","sort","sortListItems","deleteListItem","idx","j","splice","text","setItemTitle","setItemCompleted","setListName","oldListName","newListName","setItemDueDate","setItemPriority","verifyCookie","setItemDescription","render","document","listArr","selectedItem","appClasses","loginClasses","map","list","color","a","b","priorities","priorityA","indexOf","priorityB","itemIDA","itemIDB","dateA","Date","dateB"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nimport Details from \"./todolist/Details.js\";\nimport Login from \"./todolist/Login.js\";\nimport Register from \"./todolist/Register.js\";\n\nvar ObjectID = require(\"bson-objectid\");\n\nconst domain = \"http://localhost:9000\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      docTitle: \"Log in to Doozy\",\n      loggedIn: \"not yet\",\n      loginOrSignIn: \"Login\",\n      error: null,\n      lists: [],\n      username: \"Jasper\",\n      currentlySelectedList: 0,\n      currentlySelectedItemID: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // this will be where you check for the cookie\n    // if the cookie is valid, then\n    // this.setState({\n    //   loggedIn: \"successful\",\n    //   username: \"[whatever was in the cookie]\",\n    // });\n  }\n\n  verifyLogin(username, password) {\n    console.log(\"/verifyLogin called with: \" + username + \", \" + password);\n\n    const url = domain + \"/verifyLogin\";\n    const body = JSON.stringify({\n      username: username,\n      password: password,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        if (res.success) {\n          this.getLists();\n          this.setState({ docTitle: \"Lists | Doozy\", loggedIn: \"successful\" });\n        } else if (res.info === \"username does not exist\")\n          this.setState({ loggedIn: \"username does not exist\" });\n        else if (res.info === \"incorrect password\")\n          this.setState({ loggedIn: \"incorrect password\" });\n      });\n  }\n\n  setSelectedItem(itemID) {\n    this.setState({ currentlySelectedItemID: itemID });\n  }\n\n  getCurrentlySelectedItem() {\n    if (this.state.currentlySelectedItemID === \"\")\n      return {\n        title: \"\",\n        description: \"\",\n        dueDate: \"\",\n        priority: \"\",\n        completed: false,\n        itemID: \"\",\n      };\n\n    var items = this.state.lists.slice(this.state.currentlySelectedList)[0]\n      .items;\n\n    for (let i = 0; i < items.length; i++)\n      if (items[i].itemID === this.state.currentlySelectedItemID)\n        return items[i];\n  }\n\n  // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: this.state.username /*this.props.username*/,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        var lists = res;\n        this.setState({ lists: lists });\n      });\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var id = null;\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID().toString(),\n        };\n        items.push(item);\n        id = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({ lists: lists, currentlySelectedItemID: id });\n\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: id,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    console.log(\"/deleteListItem called with \" + itemID);\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        var items = lists[i].items;\n        var idx = -1;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n        items = items.splice(idx, 1);\n      }\n    }\n\n    this.setState({ lists: lists, currentlySelectedItemID: \"\" });\n\n    const url = domain + \"/deleteListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.text())\n      .then((res) => console.log(res));\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      title: title,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.text())\n      .then((res) => console.log(res));\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      completed: completed,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(listName, itemID, dueDate) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].dueDate = dueDate;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemDueDate\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      dueDate: dueDate,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  setItemPriority(listName, itemID, priority) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].priority = priority;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemPriority\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      priority: priority,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  verifyCookie() {}\n\n  setItemDescription(listName, itemID, description) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].description = description;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemDescription\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      description: description,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  render() {\n    document.title = this.state.docTitle;\n\n    const listArr = this.state.lists.slice(this.state.currentlySelectedList, 1);\n\n    const selectedItem = this.getCurrentlySelectedItem();\n    const appClasses =\n      \"container-fluid row\" +\n      (this.state.loggedIn === \"successful\" ? \"\" : \" d-none\");\n    const loginClasses =\n      \"container-fluid\" +\n      (this.state.loggedIn === \"successful\" ? \" d-none\" : \"\");\n\n    return (\n      <>\n        <div id=\"login-register\" className={loginClasses}>\n          <div className=\"row\">\n            <div className=\"col-5\">\n              <Login\n                loginInfo={this.state.loggedIn}\n                verifyLogin={(username, password) =>\n                  this.verifyLogin(username, password)\n                }\n              />\n            </div>\n            <div className=\"col-7\">\n              <Register />\n            </div>\n          </div>\n        </div>\n        <div id=\"app\" className={appClasses}>\n          <div id=\"sidebar\" className=\"col-2\"></div>\n          {listArr.map((list, i) => {\n            return (\n              <React.Fragment key={list.name}>\n                <div id=\"todolist\" className=\"col-6\">\n                  <Todolist\n                    color={list.color}\n                    name={list.name}\n                    items={list.items}\n                    addListItem={(\n                      listName,\n                      title,\n                      dueDate,\n                      description,\n                      priority\n                    ) =>\n                      this.addListItem(\n                        listName,\n                        title,\n                        dueDate,\n                        description,\n                        priority\n                      )\n                    }\n                    deleteListItem={(listName, itemID) =>\n                      this.deleteListItem(listName, itemID)\n                    }\n                    setItemTitle={(listName, itemID, title) =>\n                      this.setItemTitle(listName, itemID, title)\n                    }\n                    setItemCompleted={(listName, itemID, completed) =>\n                      this.setItemCompleted(listName, itemID, completed)\n                    }\n                    setSelectedItem={(itemID) => this.setSelectedItem(itemID)}\n                    selectedItemID={this.state.currentlySelectedItemID}\n                  />\n                </div>\n                <div id=\"details\" className=\"col-4\">\n                  <Details\n                    listName={list.name}\n                    selectedItemID={selectedItem.itemID}\n                    selectedItemTitle={selectedItem.title}\n                    selectedItemDueDate={selectedItem.dueDate}\n                    selectedItemDescription={selectedItem.description}\n                    selectedItemPriority={selectedItem.priority}\n                    selectedItemCompleted={selectedItem.completed}\n                    setItemTitle={(listName, itemID, title) =>\n                      this.setItemTitle(listName, itemID, title)\n                    }\n                    setItemCompleted={(listName, itemID, completed) =>\n                      this.setItemCompleted(listName, itemID, completed)\n                    }\n                    setItemDueDate={(listName, itemID, dueDate) =>\n                      this.setItemDueDate(listName, itemID, dueDate)\n                    }\n                    setItemPriority={(listName, itemID, priority) =>\n                      this.setItemPriority(listName, itemID, priority)\n                    }\n                    setItemDescription={(listName, itemID, description) =>\n                      this.setItemDescription(listName, itemID, description)\n                    }\n                    handleDelete={(listName, itemID) =>\n                      this.deleteListItem(listName, itemID)\n                    }\n                  />\n                </div>\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;\n  else if (!a.completed && b.completed) return -1;\n  else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;\n  else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;\n  else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n\n      if (priorityA !== priorityB) return priorityB - priorityA;\n      else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}