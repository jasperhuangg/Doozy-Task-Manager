{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nconst domain = \"http://localhost:9000\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      lists: []\n    };\n  }\n\n  rerender() {\n    this.setState({\n      isLoaded: false\n    });\n  } // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n\n\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\"\n      /*this.props.username*/\n\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      var lists = res;\n      this.setState({\n        lists: lists,\n        isLoaded: true\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded !== prevState.isLoaded) this.getLists();\n  }\n\n  setItemTitle(title) {}\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        for (let j = 0; j < lists[i].items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      completed: completed\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    });\n  }\n\n  setItemDueDate(dueDate) {}\n\n  setItemPriority(priority) {}\n\n  setItemDescription(description) {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, this.state.lists.map((list, i) => /*#__PURE__*/React.createElement(Todolist, {\n      key: i,\n      color: list.color,\n      name: list.name,\n      items: list.items,\n      addListItem: this.addListItem,\n      rerender: () => this.rerender(),\n      setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n      setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n      setItemDueDate: (listName, itemID, dueDate) => this.setItemDueDate(listName, itemID, dueDate),\n      setItemPriority: (listName, itemID, priority) => this.setItemPriority(listName, itemID, priority),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js"],"names":["React","Component","Todolist","domain","App","constructor","props","state","isLoaded","error","lists","rerender","setState","getLists","url","body","JSON","stringify","username","fetch","method","headers","then","res","json","componentDidMount","componentDidUpdate","prevProps","prevState","setItemTitle","title","setItemCompleted","listName","itemID","completed","slice","i","length","name","j","items","setItemDueDate","dueDate","setItemPriority","priority","setItemDescription","description","render","map","list","color","addListItem"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\n\nconst domain = \"http://localhost:9000\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoaded: false, error: null, lists: [] };\n  }\n\n  rerender() {\n    this.setState({ isLoaded: false });\n  }\n\n  // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\" /*this.props.username*/,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        var lists = res;\n        this.setState({ lists: lists, isLoaded: true });\n      });\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded !== prevState.isLoaded) this.getLists();\n  }\n\n  setItemTitle(title) {}\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        for (let j = 0; j < lists[i].items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      completed: completed,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    });\n  }\n\n  setItemDueDate(dueDate) {}\n\n  setItemPriority(priority) {}\n\n  setItemDescription(description) {}\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.lists.map((list, i) => (\n          <Todolist\n            key={i}\n            color={list.color}\n            name={list.name}\n            items={list.items}\n            addListItem={this.addListItem}\n            rerender={() => this.rerender()}\n            setItemTitle={(listName, itemID, title) =>\n              this.setItemTitle(listName, itemID, title)\n            }\n            setItemCompleted={(listName, itemID, completed) =>\n              this.setItemCompleted(listName, itemID, completed)\n            }\n            setItemDueDate={(listName, itemID, dueDate) =>\n              this.setItemDueDate(listName, itemID, dueDate)\n            }\n            setItemPriority={(listName, itemID, priority) =>\n              this.setItemPriority(listName, itemID, priority)\n            }\n          />\n        ))}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}