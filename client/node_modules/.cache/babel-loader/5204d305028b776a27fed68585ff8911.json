{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nimport Details from \"./todolist/Details.js\";\nimport Login from \"./todolist/Login.js\";\nimport Register from \"./todolist/Register.js\";\n\nvar ObjectID = require(\"bson-objectid\");\n\nconst domain = \"http://localhost:9000\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      docTitle: \"Log in | Doozy\",\n      loggedIn: \"not yet\",\n      loginOrRegister: \"login\",\n      error: null,\n      lists: [],\n      username: \"jasperhu@usc.edu\",\n      currentlySelectedList: 0,\n      currentlySelectedItemID: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // this will be where you check for the cookie\n    // if the cookie is valid, then\n    // this.setState({\n    //   loggedIn: \"successful\",\n    //   username: \"[whatever was in the cookie]\",\n    // });\n    const backgroundURLs = [\"arctic_trees.jpg\", \"beach_arch.jpg\", \"boats.jpg\", \"chill_trees.jpg\", \"duck.jpg\", \"glacier.jpg\", \"opera_house.jpg\", \"sand_dunes.jpg\", \"sunset_forest.jpg\", \"trail.jpg\", \"water_tones.jpg\"];\n    const currBackground = Math.floor(Math.random() * Math.floor(backgroundURLs.length));\n    const bgURL = \"../assets/\" + backgroundURLs[this.state.currBackground];\n    $($document).find(\"#app\").css(\"background-image\", bgURL);\n  }\n\n  verifyLogin(username, password) {\n    const url = domain + \"/verifyLogin\";\n    const body = JSON.stringify({\n      username: username,\n      password: password\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      if (res.success) {\n        this.getLists();\n        this.setState({\n          docTitle: \"Lists | Doozy\",\n          loggedIn: \"successful\"\n        });\n      } else if (res.info === \"username does not exist\") this.setState({\n        loggedIn: \"username does not exist\"\n      });else if (res.info === \"incorrect password\") this.setState({\n        loggedIn: \"incorrect password\"\n      });\n    });\n  }\n\n  setSelectedItem(itemID) {\n    this.setState({\n      currentlySelectedItemID: itemID\n    });\n  }\n\n  getCurrentlySelectedItem() {\n    if (this.state.currentlySelectedItemID === \"\") return {\n      title: \"\",\n      description: \"\",\n      dueDate: \"\",\n      priority: \"\",\n      completed: false,\n      itemID: \"\"\n    };\n    var items = this.state.lists.slice(this.state.currentlySelectedList)[0].items;\n\n    for (let i = 0; i < items.length; i++) if (items[i].itemID === this.state.currentlySelectedItemID) return items[i];\n  } // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n\n\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: this.state.username\n      /*this.props.username*/\n\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      var lists = res;\n      this.setState({\n        lists: lists\n      });\n    });\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var id = null;\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID().toString()\n        };\n        items.push(item);\n        id = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists,\n      currentlySelectedItemID: id\n    });\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: id\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    console.log(\"/deleteListItem called with \" + itemID);\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        var items = lists[i].items;\n        var idx = -1;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n\n        items = items.splice(idx, 1);\n      }\n    }\n\n    this.setState({\n      lists: lists,\n      currentlySelectedItemID: \"\"\n    });\n    const url = domain + \"/deleteListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.text()).then(res => console.log(res));\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      title: title\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    }).then(res => res.text()).then(res => console.log(res));\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      completed: completed\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(listName, itemID, dueDate) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].dueDate = dueDate;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemDueDate\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      dueDate: dueDate\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  setItemPriority(listName, itemID, priority) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].priority = priority;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemPriority\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      priority: priority\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  verifyCookie() {}\n\n  toggleLoginRegister() {\n    if (this.state.loginOrRegister === \"login\") this.setState({\n      docTitle: \"Sign Up | Doozy\",\n      loginOrRegister: \"register\"\n    });else if (this.state.loginOrRegister === \"register\") this.setState({\n      docTitle: \"Log In | Doozy\",\n      loginOrRegister: \"login\"\n    });\n  }\n\n  setItemDescription(listName, itemID, description) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].description = description;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemDescription\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      description: description\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n  }\n\n  render() {\n    document.title = this.state.docTitle;\n    const listArr = this.state.lists.slice(this.state.currentlySelectedList, 1);\n    const selectedItem = this.getCurrentlySelectedItem();\n    const appClasses = \"row\" + (this.state.loggedIn === \"successful\" ? \"\" : \" d-none\");\n    const loginClasses = \"container-fluid\" + (this.state.loggedIn === \"successful\" ? \" d-none\" : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"login-register\",\n      className: loginClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-section\" + (this.state.loginOrRegister === \"login\" ? \"\" : \" invisible\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Login, {\n      loginInfo: this.state.loggedIn,\n      verifyLogin: (username, password) => this.verifyLogin(username, password),\n      switchToRegister: () => this.toggleLoginRegister(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"register-section\" + (this.state.loginOrRegister === \"register\" ? \"\" : \" invisible\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Register, {\n      switchToLogin: () => this.toggleLoginRegister(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"app\",\n      className: appClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"sidebar\",\n      className: \"col-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }\n    }), listArr.map((list, i) => {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: list.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"todolist\",\n        className: \"col-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Todolist, {\n        color: list.color,\n        name: list.name,\n        items: list.items,\n        addListItem: (listName, title, dueDate, description, priority) => this.addListItem(listName, title, dueDate, description, priority),\n        deleteListItem: (listName, itemID) => this.deleteListItem(listName, itemID),\n        setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n        setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n        setSelectedItem: itemID => this.setSelectedItem(itemID),\n        selectedItemID: this.state.currentlySelectedItemID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"details\",\n        className: \"col-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Details, {\n        listName: list.name,\n        selectedItemID: selectedItem.itemID,\n        selectedItemTitle: selectedItem.title,\n        selectedItemDueDate: selectedItem.dueDate,\n        selectedItemDescription: selectedItem.description,\n        selectedItemPriority: selectedItem.priority,\n        selectedItemCompleted: selectedItem.completed,\n        setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n        setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n        setItemDueDate: (listName, itemID, dueDate) => this.setItemDueDate(listName, itemID, dueDate),\n        setItemPriority: (listName, itemID, priority) => this.setItemPriority(listName, itemID, priority),\n        setItemDescription: (listName, itemID, description) => this.setItemDescription(listName, itemID, description),\n        handleDelete: (listName, itemID) => this.deleteListItem(listName, itemID),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 19\n        }\n      })));\n    })));\n  }\n\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;else if (!a.completed && b.completed) return -1;else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n      if (priorityA !== priorityB) return priorityB - priorityA;else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js"],"names":["React","Component","Todolist","Details","Login","Register","ObjectID","require","domain","App","constructor","props","state","docTitle","loggedIn","loginOrRegister","error","lists","username","currentlySelectedList","currentlySelectedItemID","componentDidMount","backgroundURLs","currBackground","Math","floor","random","length","bgURL","$","$document","find","css","verifyLogin","password","url","body","JSON","stringify","fetch","method","headers","then","res","json","success","getLists","setState","info","setSelectedItem","itemID","getCurrentlySelectedItem","title","description","dueDate","priority","completed","items","slice","i","addListItem","listName","id","name","item","toString","push","sort","sortListItems","deleteListItem","console","log","idx","j","splice","text","setItemTitle","setItemCompleted","setListName","oldListName","newListName","setItemDueDate","setItemPriority","verifyCookie","toggleLoginRegister","setItemDescription","render","document","listArr","selectedItem","appClasses","loginClasses","map","list","color","a","b","priorities","priorityA","indexOf","priorityB","itemIDA","itemIDB","dateA","Date","dateB"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nimport Details from \"./todolist/Details.js\";\nimport Login from \"./todolist/Login.js\";\nimport Register from \"./todolist/Register.js\";\n\nvar ObjectID = require(\"bson-objectid\");\n\nconst domain = \"http://localhost:9000\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      docTitle: \"Log in | Doozy\",\n      loggedIn: \"not yet\",\n      loginOrRegister: \"login\",\n      error: null,\n      lists: [],\n      username: \"jasperhu@usc.edu\",\n      currentlySelectedList: 0,\n      currentlySelectedItemID: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // this will be where you check for the cookie\n    // if the cookie is valid, then\n    // this.setState({\n    //   loggedIn: \"successful\",\n    //   username: \"[whatever was in the cookie]\",\n    // });\n\n    const backgroundURLs = [\n      \"arctic_trees.jpg\",\n      \"beach_arch.jpg\",\n      \"boats.jpg\",\n      \"chill_trees.jpg\",\n      \"duck.jpg\",\n      \"glacier.jpg\",\n      \"opera_house.jpg\",\n      \"sand_dunes.jpg\",\n      \"sunset_forest.jpg\",\n      \"trail.jpg\",\n      \"water_tones.jpg\",\n    ];\n    const currBackground = Math.floor(\n      Math.random() * Math.floor(backgroundURLs.length)\n    );\n\n    const bgURL = \"../assets/\" + backgroundURLs[this.state.currBackground];\n    $($document).find(\"#app\").css(\"background-image\", bgURL);\n  }\n\n  verifyLogin(username, password) {\n    const url = domain + \"/verifyLogin\";\n    const body = JSON.stringify({\n      username: username,\n      password: password,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.success) {\n          this.getLists();\n          this.setState({ docTitle: \"Lists | Doozy\", loggedIn: \"successful\" });\n        } else if (res.info === \"username does not exist\")\n          this.setState({ loggedIn: \"username does not exist\" });\n        else if (res.info === \"incorrect password\")\n          this.setState({ loggedIn: \"incorrect password\" });\n      });\n  }\n\n  setSelectedItem(itemID) {\n    this.setState({ currentlySelectedItemID: itemID });\n  }\n\n  getCurrentlySelectedItem() {\n    if (this.state.currentlySelectedItemID === \"\")\n      return {\n        title: \"\",\n        description: \"\",\n        dueDate: \"\",\n        priority: \"\",\n        completed: false,\n        itemID: \"\",\n      };\n\n    var items = this.state.lists.slice(this.state.currentlySelectedList)[0]\n      .items;\n\n    for (let i = 0; i < items.length; i++)\n      if (items[i].itemID === this.state.currentlySelectedItemID)\n        return items[i];\n  }\n\n  // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: this.state.username /*this.props.username*/,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        var lists = res;\n        this.setState({ lists: lists });\n      });\n  }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var id = null;\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID().toString(),\n        };\n        items.push(item);\n        id = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({ lists: lists, currentlySelectedItemID: id });\n\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: id,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    console.log(\"/deleteListItem called with \" + itemID);\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        var items = lists[i].items;\n        var idx = -1;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n        items = items.splice(idx, 1);\n      }\n    }\n\n    this.setState({ lists: lists, currentlySelectedItemID: \"\" });\n\n    const url = domain + \"/deleteListItem\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.text())\n      .then((res) => console.log(res));\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      title: title,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    })\n      .then((res) => res.text())\n      .then((res) => console.log(res));\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      completed: completed,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(listName, itemID, dueDate) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].dueDate = dueDate;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemDueDate\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      dueDate: dueDate,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  setItemPriority(listName, itemID, priority) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].priority = priority;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemPriority\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      priority: priority,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  verifyCookie() {}\n\n  toggleLoginRegister() {\n    if (this.state.loginOrRegister === \"login\")\n      this.setState({\n        docTitle: \"Sign Up | Doozy\",\n        loginOrRegister: \"register\",\n      });\n    else if (this.state.loginOrRegister === \"register\")\n      this.setState({\n        docTitle: \"Log In | Doozy\",\n        loginOrRegister: \"login\",\n      });\n  }\n\n  setItemDescription(listName, itemID, description) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].description = description;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemDescription\";\n    const body = JSON.stringify({\n      username: this.state.username,\n      listName: listName,\n      itemID: itemID,\n      description: description,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: body,\n    });\n  }\n\n  render() {\n    document.title = this.state.docTitle;\n\n    const listArr = this.state.lists.slice(this.state.currentlySelectedList, 1);\n\n    const selectedItem = this.getCurrentlySelectedItem();\n    const appClasses =\n      \"row\" + (this.state.loggedIn === \"successful\" ? \"\" : \" d-none\");\n    const loginClasses =\n      \"container-fluid\" +\n      (this.state.loggedIn === \"successful\" ? \" d-none\" : \"\");\n\n    return (\n      <>\n        <div id=\"login-register\" className={loginClasses}>\n          <div\n            className={\n              \"login-section\" +\n              (this.state.loginOrRegister === \"login\" ? \"\" : \" invisible\")\n            }\n          >\n            <Login\n              loginInfo={this.state.loggedIn}\n              verifyLogin={(username, password) =>\n                this.verifyLogin(username, password)\n              }\n              switchToRegister={() => this.toggleLoginRegister()}\n            />\n          </div>\n          <div\n            className={\n              \"register-section\" +\n              (this.state.loginOrRegister === \"register\" ? \"\" : \" invisible\")\n            }\n          >\n            <Register switchToLogin={() => this.toggleLoginRegister()} />\n          </div>\n        </div>\n        <div id=\"app\" className={appClasses}>\n          <div id=\"sidebar\" className=\"col-2\"></div>\n          {listArr.map((list, i) => {\n            return (\n              <React.Fragment key={list.name}>\n                <div id=\"todolist\" className=\"col-6\">\n                  <Todolist\n                    color={list.color}\n                    name={list.name}\n                    items={list.items}\n                    addListItem={(\n                      listName,\n                      title,\n                      dueDate,\n                      description,\n                      priority\n                    ) =>\n                      this.addListItem(\n                        listName,\n                        title,\n                        dueDate,\n                        description,\n                        priority\n                      )\n                    }\n                    deleteListItem={(listName, itemID) =>\n                      this.deleteListItem(listName, itemID)\n                    }\n                    setItemTitle={(listName, itemID, title) =>\n                      this.setItemTitle(listName, itemID, title)\n                    }\n                    setItemCompleted={(listName, itemID, completed) =>\n                      this.setItemCompleted(listName, itemID, completed)\n                    }\n                    setSelectedItem={(itemID) => this.setSelectedItem(itemID)}\n                    selectedItemID={this.state.currentlySelectedItemID}\n                  />\n                </div>\n                <div id=\"details\" className=\"col-4\">\n                  <Details\n                    listName={list.name}\n                    selectedItemID={selectedItem.itemID}\n                    selectedItemTitle={selectedItem.title}\n                    selectedItemDueDate={selectedItem.dueDate}\n                    selectedItemDescription={selectedItem.description}\n                    selectedItemPriority={selectedItem.priority}\n                    selectedItemCompleted={selectedItem.completed}\n                    setItemTitle={(listName, itemID, title) =>\n                      this.setItemTitle(listName, itemID, title)\n                    }\n                    setItemCompleted={(listName, itemID, completed) =>\n                      this.setItemCompleted(listName, itemID, completed)\n                    }\n                    setItemDueDate={(listName, itemID, dueDate) =>\n                      this.setItemDueDate(listName, itemID, dueDate)\n                    }\n                    setItemPriority={(listName, itemID, priority) =>\n                      this.setItemPriority(listName, itemID, priority)\n                    }\n                    setItemDescription={(listName, itemID, description) =>\n                      this.setItemDescription(listName, itemID, description)\n                    }\n                    handleDelete={(listName, itemID) =>\n                      this.deleteListItem(listName, itemID)\n                    }\n                  />\n                </div>\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;\n  else if (!a.completed && b.completed) return -1;\n  else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;\n  else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;\n  else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n\n      if (priorityA !== priorityB) return priorityB - priorityA;\n      else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}