{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\nconst domain = \"http://localhost:9000\";\n\nvar ObjectID = require(\"bson-objectid\");\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      lists: []\n    };\n  } // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n\n\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\"\n      /*this.props.username*/\n\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    }).then(res => res.json()).then(res => {\n      var lists = res;\n      this.setState({\n        lists: lists,\n        isLoaded: true\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.getLists();\n  } // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.isLoaded !== prevState.isLoaded) this.getLists();\n  // }\n\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var objID = null;\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID()\n        };\n        items.push(item);\n        objID = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: objID\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var idx = -1;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      title: title\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    });\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      lists: lists\n    });\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      completed: completed\n    });\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: body\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(dueDate) {}\n\n  setItemPriority(priority) {}\n\n  setItemDescription(description) {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }\n    }, this.state.lists.map((list, i) => /*#__PURE__*/React.createElement(Todolist, {\n      key: list.name,\n      color: list.color,\n      name: list.name,\n      items: list.items,\n      addListItem: (listName, title, dueDate, description, priority) => this.addListItem(listName, title, dueDate, description, priority),\n      setItemTitle: (listName, itemID, title) => this.setItemTitle(listName, itemID, title),\n      setItemCompleted: (listName, itemID, completed) => this.setItemCompleted(listName, itemID, completed),\n      setItemDueDate: (listName, itemID, dueDate) => this.setItemDueDate(listName, itemID, dueDate),\n      setItemPriority: (listName, itemID, priority) => this.setItemPriority(listName, itemID, priority),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;else if (!a.completed && b.completed) return -1;else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n      if (priorityA !== priorityB) return priorityB - priorityA;else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/App.js"],"names":["React","Component","Todolist","domain","ObjectID","require","App","constructor","props","state","isLoaded","error","lists","getLists","url","body","JSON","stringify","username","fetch","method","headers","then","res","json","setState","componentDidMount","addListItem","listName","title","dueDate","description","priority","slice","objID","i","length","name","items","item","completed","itemID","push","sort","sortListItems","deleteListItem","idx","j","setItemTitle","setItemCompleted","setListName","oldListName","newListName","setItemDueDate","setItemPriority","setItemDescription","render","map","list","color","a","b","priorities","priorityA","indexOf","priorityB","itemIDA","itemIDB","dateA","Date","dateB"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./todolist/Todolist.js\";\n\nconst domain = \"http://localhost:9000\";\nvar ObjectID = require(\"bson-objectid\");\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      lists: [],\n    };\n  }\n\n  // for now assume we are getting the user's username from the props\n  // that are being passed in by a Login component (to be created)\n  getLists() {\n    const url = domain + \"/getLists\";\n    const body = JSON.stringify({\n      username: \"Jasper\" /*this.props.username*/,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        var lists = res;\n        this.setState({ lists: lists, isLoaded: true });\n      });\n  }\n\n  componentDidMount() {\n    this.getLists();\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.isLoaded !== prevState.isLoaded) this.getLists();\n  // }\n\n  addListItem(listName, title, dueDate, description, priority) {\n    const lists = this.state.lists.slice();\n    var objID = null;\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var item = {\n          title: title,\n          description: description,\n          dueDate: dueDate,\n          priority: priority,\n          completed: false,\n          itemID: new ObjectID(),\n        };\n        items.push(item);\n        objID = item.itemID;\n        items.sort(sortListItems);\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/addListItem\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      title: title,\n      dueDate: dueDate,\n      description: description,\n      priority: priority,\n      itemID: objID,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    });\n  }\n\n  deleteListItem(listName, itemID) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        var idx = -1;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            idx = j;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  setItemTitle(listName, itemID, title) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].title = title;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemTitle\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      title: title,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    });\n  }\n\n  setItemCompleted(listName, itemID, completed) {\n    const lists = this.state.lists.slice();\n    for (let i = 0; i < lists.length; i++) {\n      if (lists[i].name === listName) {\n        const items = lists[i].items;\n        for (let j = 0; j < items.length; j++) {\n          if (items[j].itemID === itemID) {\n            items[j].completed = completed;\n            items.sort(sortListItems);\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({ lists: lists });\n\n    const url = domain + \"/setItemCompleted\";\n    const body = JSON.stringify({\n      username: \"Jasper\",\n      listName: listName,\n      itemID: itemID,\n      completed: completed,\n    });\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body,\n    });\n  }\n\n  setListName(oldListName, newListName) {}\n\n  setItemDueDate(dueDate) {}\n\n  setItemPriority(priority) {}\n\n  setItemDescription(description) {}\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.lists.map((list, i) => (\n          <Todolist\n            key={list.name}\n            color={list.color}\n            name={list.name}\n            items={list.items}\n            addListItem={(listName, title, dueDate, description, priority) =>\n              this.addListItem(listName, title, dueDate, description, priority)\n            }\n            setItemTitle={(listName, itemID, title) =>\n              this.setItemTitle(listName, itemID, title)\n            }\n            setItemCompleted={(listName, itemID, completed) =>\n              this.setItemCompleted(listName, itemID, completed)\n            }\n            setItemDueDate={(listName, itemID, dueDate) =>\n              this.setItemDueDate(listName, itemID, dueDate)\n            }\n            setItemPriority={(listName, itemID, priority) =>\n              this.setItemPriority(listName, itemID, priority)\n            }\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction sortListItems(a, b) {\n  if (a.completed && !b.completed) return 1;\n  else if (!a.completed && b.completed) return -1;\n  else if (a.dueDate === \"\" && b.dueDate !== \"\") return 1;\n  else if (a.dueDate !== \"\" && b.dueDate === \"\") return -1;\n  else {\n    // both are either completed or incomplete or have a due date set or no due date set\n    if (a.dueDate === b.dueDate) {\n      // sort items due on the same day by priority\n      const priorities = [\"low\", \"medium\", \"high\"];\n      const priorityA = priorities.indexOf(a.priority);\n      const priorityB = priorities.indexOf(b.priority);\n\n      if (priorityA !== priorityB) return priorityB - priorityA;\n      else {\n        // sort by itemID\n        const itemIDA = a.itemID;\n        const itemIDB = b.itemID;\n        return itemIDA - itemIDB;\n      }\n    } else {\n      // sort items based on date\n      const dateA = new Date(a.dueDate + \" 00:00\");\n      const dateB = new Date(b.dueDate + \" 00:00\");\n      return dateA - dateB;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}