{"ast":null,"code":"// only call this function if a date hasn't already been parsed from the string in TodoList\nfunction GetDateFromString(str) {\n  const spokenWords = [\"tomorrow\", \"tmr\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"];\n  const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n  const daysWithSuffix = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\", \"8th\", \"9th\", \"10th\", \"11th\", \"12th\", \"13th\", \"14th\", \"15th\", \"16th\", \"17th\", \"18th\", \"19th\", \"20th\", \"21st\", \"22nd\", \"23rd\", \"24th\", \"25th\", \"26th\", \"27th\", \"28th\", \"29th\", \"30th\", \"31st\"];\n  var words = str.toLowerCase().split(\" \");\n  var isSpokenWord = false;\n  var isStringDate = false;\n  var keywords = \"\";\n  var month = \"\";\n  var day = \"\"; // search for any occurences of commonly spoken words\n\n  for (let i = 0; i < spokenWords.length; i++) {\n    var word = spokenWords[i];\n\n    if (words.indexOf(word) !== -1) {\n      keywords = word;\n      isSpokenWord = true;\n      break;\n    }\n  } // if we don't find any commonly spoken words, look for string representations of dates\n\n\n  if (isSpokenWord === false) {\n    // look for months\n    for (let i = 0; i < months.length; i++) {\n      const m = months[i];\n\n      if (words.indexOf(m) !== -1) {\n        month = m;\n        break;\n      }\n    } // if we found a month, look on either side of it for a date\n\n\n    if (month !== \"\") {\n      const monthIndex = words.indexOf(month);\n      var dateCandidates = [];\n      if (monthIndex - 1 >= 0) dateCandidates.push(words[monthIndex - 1]);\n      if (monthIndex + 1 < words.length) dateCandidates.push(words[monthIndex + 1]); // check to see if either of these dateCandidates are actual dates with suffixes\n\n      for (let i = 0; i < dateCandidates.length; i++) {\n        const dateCandidate = dateCandidates[i];\n\n        if (daysWithSuffix.indexOf(dateCandidate) !== -1) {\n          day = dateCandidates;\n          break;\n        }\n      } // if nothing was found, then we look for numeric representations\n\n\n      for (let i = 0; i < dateCandidates.length; i++) {\n        const dateCandidate = parseInt(dateCandidates[i]);\n\n        if (dateCandidate > 0 && dateCandidate <= 31) {\n          day = dateCandidates;\n          break;\n        }\n      } // if we found a date, then we have a date value\n\n\n      if (day !== \"\") {\n        isStringDate = true;\n      }\n    }\n  } // create and return the parsed date\n\n\n  if (!isSpokenWord && !isStringDate) return \"\"; // no date found\n  else if (isSpokenWord && !isStringDate) {\n      var today = new Date();\n      var currYear = today.getFullYear();\n      var currMonth = today.getMonth() + 1;\n      var currDate = today.getDate();\n      var currDayOfTheWeek = today.getDay() + 1;\n\n      if (keywords === \"tomorrow\" || keywords === \"tmr\") {\n        var daysInMonth = 31;\n        var day = (currDate + 1) % daysInMonth;\n        var m = day === 1 ? currMonth + 1 : currMonth;\n        m = m % 12 !== 0 ? m % 12 : 1;\n        var year = m === 1 ? currYear + 1 : currYear;\n        return m + \"-\" + day + \"-\" + year;\n      } else {\n        var dayOfTheWeek = dayOfTheWeekToNumber(keywords); // always going to assume its the next upcoming day\n\n        var difference = distanceToNextDay(currDayOfTheWeek, dayOfTheWeek);\n        var daysInMonth = 31;\n        var day = (currDate + difference) % daysInMonth;\n        var m = day === 1 ? currMonth + 1 : currMonth;\n        m = m % 12 !== 0 ? m % 12 : 1;\n        var year = m === 1 ? currYear + 1 : currYear;\n        return m + \"-\" + day + \"-\" + year;\n      }\n    } else if (isStringDate && !isSpokenWord) {\n      var today = new Date(); // we will just assume they mean this year (or next year if either come before the current day)\n\n      var currYear = today.getFullYear();\n      var currMonth = today.getMonth() + 1;\n      var currDay = today.getDate();\n      var monthNum = convertMonthToNumber(month);\n      var dayNum = parseInt(day);\n      var year = currYear;\n      if (monthNum < currMonth) year = currYear + 1;else if (monthNum === currMonth) {\n        if (dayNum < currDay) year = currYear + 1;\n      } else year = currYear;\n      return monthNum + \"-\" + dayNum + \"-\" + year;\n    }\n}\n\nfunction convertMonthToNumber(month) {\n  const months = [\"\", \"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n  return months.indexOf(month);\n}\n\nfunction dayOfTheWeekToNumber(dayOfTheWeek) {\n  const daysOfTheWeek = [\"\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n  return daysOfTheWeek.indexOf(dayOfTheWeek);\n}\n\nfunction distanceToNextDay(day1, day2) {\n  var diff = 7 - day1 + day2;\n  if (diff !== 7) diff %= 7;\n  return diff;\n} // var date = GetDateFromString(\"\");\n// console.log(date);","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/mern-todolist/client/src/todolist/DateParser.js"],"names":["GetDateFromString","str","spokenWords","months","daysWithSuffix","words","toLowerCase","split","isSpokenWord","isStringDate","keywords","month","day","i","length","word","indexOf","m","monthIndex","dateCandidates","push","dateCandidate","parseInt","today","Date","currYear","getFullYear","currMonth","getMonth","currDate","getDate","currDayOfTheWeek","getDay","daysInMonth","year","dayOfTheWeek","dayOfTheWeekToNumber","difference","distanceToNextDay","currDay","monthNum","convertMonthToNumber","dayNum","daysOfTheWeek","day1","day2","diff"],"mappings":"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","sourcesContent":["// only call this function if a date hasn't already been parsed from the string in TodoList\n\nfunction GetDateFromString(str) {\n  const spokenWords = [\n    \"tomorrow\",\n    \"tmr\",\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\",\n    \"sunday\",\n  ];\n\n  const months = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n  ];\n\n  const daysWithSuffix = [\n    \"1st\",\n    \"2nd\",\n    \"3rd\",\n    \"4th\",\n    \"5th\",\n    \"6th\",\n    \"7th\",\n    \"8th\",\n    \"9th\",\n    \"10th\",\n    \"11th\",\n    \"12th\",\n    \"13th\",\n    \"14th\",\n    \"15th\",\n    \"16th\",\n    \"17th\",\n    \"18th\",\n    \"19th\",\n    \"20th\",\n    \"21st\",\n    \"22nd\",\n    \"23rd\",\n    \"24th\",\n    \"25th\",\n    \"26th\",\n    \"27th\",\n    \"28th\",\n    \"29th\",\n    \"30th\",\n    \"31st\",\n  ];\n\n  var words = str.toLowerCase().split(\" \");\n\n  var isSpokenWord = false;\n  var isStringDate = false;\n  var keywords = \"\";\n  var month = \"\";\n  var day = \"\";\n\n  // search for any occurences of commonly spoken words\n  for (let i = 0; i < spokenWords.length; i++) {\n    var word = spokenWords[i];\n    if (words.indexOf(word) !== -1) {\n      keywords = word;\n      isSpokenWord = true;\n      break;\n    }\n  }\n\n  // if we don't find any commonly spoken words, look for string representations of dates\n  if (isSpokenWord === false) {\n    // look for months\n    for (let i = 0; i < months.length; i++) {\n      const m = months[i];\n      if (words.indexOf(m) !== -1) {\n        month = m;\n        break;\n      }\n    }\n\n    // if we found a month, look on either side of it for a date\n    if (month !== \"\") {\n      const monthIndex = words.indexOf(month);\n      var dateCandidates = [];\n      if (monthIndex - 1 >= 0) dateCandidates.push(words[monthIndex - 1]);\n      if (monthIndex + 1 < words.length)\n        dateCandidates.push(words[monthIndex + 1]);\n\n      // check to see if either of these dateCandidates are actual dates with suffixes\n      for (let i = 0; i < dateCandidates.length; i++) {\n        const dateCandidate = dateCandidates[i];\n        if (daysWithSuffix.indexOf(dateCandidate) !== -1) {\n          day = dateCandidates;\n          break;\n        }\n      }\n\n      // if nothing was found, then we look for numeric representations\n      for (let i = 0; i < dateCandidates.length; i++) {\n        const dateCandidate = parseInt(dateCandidates[i]);\n        if (dateCandidate > 0 && dateCandidate <= 31) {\n          day = dateCandidates;\n          break;\n        }\n      }\n\n      // if we found a date, then we have a date value\n      if (day !== \"\") {\n        isStringDate = true;\n      }\n    }\n  }\n\n  // create and return the parsed date\n  if (!isSpokenWord && !isStringDate) return \"\";\n  // no date found\n  else if (isSpokenWord && !isStringDate) {\n    var today = new Date();\n    var currYear = today.getFullYear();\n    var currMonth = today.getMonth() + 1;\n    var currDate = today.getDate();\n    var currDayOfTheWeek = today.getDay() + 1;\n\n    if (keywords === \"tomorrow\" || keywords === \"tmr\") {\n      var daysInMonth = 31;\n      var day = (currDate + 1) % daysInMonth;\n      var m = day === 1 ? currMonth + 1 : currMonth;\n      m = m % 12 !== 0 ? m % 12 : 1;\n      var year = m === 1 ? currYear + 1 : currYear;\n\n      return m + \"-\" + day + \"-\" + year;\n    } else {\n      var dayOfTheWeek = dayOfTheWeekToNumber(keywords); // always going to assume its the next upcoming day\n      var difference = distanceToNextDay(currDayOfTheWeek, dayOfTheWeek);\n      var daysInMonth = 31;\n      var day = (currDate + difference) % daysInMonth;\n      var m = day === 1 ? currMonth + 1 : currMonth;\n      m = m % 12 !== 0 ? m % 12 : 1;\n      var year = m === 1 ? currYear + 1 : currYear;\n\n      return m + \"-\" + day + \"-\" + year;\n    }\n  } else if (isStringDate && !isSpokenWord) {\n    var today = new Date(); // we will just assume they mean this year (or next year if either come before the current day)\n    var currYear = today.getFullYear();\n    var currMonth = today.getMonth() + 1;\n    var currDay = today.getDate();\n\n    var monthNum = convertMonthToNumber(month);\n    var dayNum = parseInt(day);\n\n    var year = currYear;\n    if (monthNum < currMonth) year = currYear + 1;\n    else if (monthNum === currMonth) {\n      if (dayNum < currDay) year = currYear + 1;\n    } else year = currYear;\n\n    return monthNum + \"-\" + dayNum + \"-\" + year;\n  }\n}\n\nfunction convertMonthToNumber(month) {\n  const months = [\n    \"\",\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n  ];\n\n  return months.indexOf(month);\n}\n\nfunction dayOfTheWeekToNumber(dayOfTheWeek) {\n  const daysOfTheWeek = [\n    \"\",\n    \"sunday\",\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\",\n  ];\n\n  return daysOfTheWeek.indexOf(dayOfTheWeek);\n}\n\nfunction distanceToNextDay(day1, day2) {\n  var diff = 7 - day1 + day2;\n  if (diff !== 7) diff %= 7;\n  return diff;\n}\n\n// var date = GetDateFromString(\"\");\n// console.log(date);\n"]},"metadata":{},"sourceType":"module"}